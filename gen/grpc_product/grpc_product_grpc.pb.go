// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/grpc_product.proto

package grpc_product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcProductsServiceClient is the client API for GrpcProductsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcProductsServiceClient interface {
	Fetch(ctx context.Context, in *RequestFetch, opts ...grpc.CallOption) (*ResponseFetch, error)
	List(ctx context.Context, in *RequestList, opts ...grpc.CallOption) (*ResponseList, error)
}

type grpcProductsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcProductsServiceClient(cc grpc.ClientConnInterface) GrpcProductsServiceClient {
	return &grpcProductsServiceClient{cc}
}

func (c *grpcProductsServiceClient) Fetch(ctx context.Context, in *RequestFetch, opts ...grpc.CallOption) (*ResponseFetch, error) {
	out := new(ResponseFetch)
	err := c.cc.Invoke(ctx, "/grpc_product.GrpcProductsService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcProductsServiceClient) List(ctx context.Context, in *RequestList, opts ...grpc.CallOption) (*ResponseList, error) {
	out := new(ResponseList)
	err := c.cc.Invoke(ctx, "/grpc_product.GrpcProductsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcProductsServiceServer is the server API for GrpcProductsService service.
// All implementations must embed UnimplementedGrpcProductsServiceServer
// for forward compatibility
type GrpcProductsServiceServer interface {
	Fetch(context.Context, *RequestFetch) (*ResponseFetch, error)
	List(context.Context, *RequestList) (*ResponseList, error)
	mustEmbedUnimplementedGrpcProductsServiceServer()
}

// UnimplementedGrpcProductsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcProductsServiceServer struct {
}

func (UnimplementedGrpcProductsServiceServer) Fetch(context.Context, *RequestFetch) (*ResponseFetch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedGrpcProductsServiceServer) List(context.Context, *RequestList) (*ResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGrpcProductsServiceServer) mustEmbedUnimplementedGrpcProductsServiceServer() {}

// UnsafeGrpcProductsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcProductsServiceServer will
// result in compilation errors.
type UnsafeGrpcProductsServiceServer interface {
	mustEmbedUnimplementedGrpcProductsServiceServer()
}

func RegisterGrpcProductsServiceServer(s grpc.ServiceRegistrar, srv GrpcProductsServiceServer) {
	s.RegisterService(&GrpcProductsService_ServiceDesc, srv)
}

func _GrpcProductsService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFetch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcProductsServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_product.GrpcProductsService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcProductsServiceServer).Fetch(ctx, req.(*RequestFetch))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcProductsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcProductsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_product.GrpcProductsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcProductsServiceServer).List(ctx, req.(*RequestList))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcProductsService_ServiceDesc is the grpc.ServiceDesc for GrpcProductsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcProductsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_product.GrpcProductsService",
	HandlerType: (*GrpcProductsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _GrpcProductsService_Fetch_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GrpcProductsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc_product.proto",
}
